import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from pydub import AudioSegment
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from aiogram.types import BotCommand
user_questions = {}
from gpt.prompts import *




import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from config import TELEGRAM_BOT_TOKEN
from handlers import start, question  # –∏–º–ø–æ—Ä—Ç –¥—Ä—É–≥–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤

async def main():
    session = AiohttpSession()
    bot = Bot(token=TELEGRAM_BOT_TOKEN, session=session, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(start.router)
    dp.include_router(question.router)

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



# # üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# async def main():
#     print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
#     await bot.delete_webhook(drop_pending_updates=True)
#     await set_bot_commands(bot)
#     await dp.start_polling(bot)


# # Initialize bot
# session = AiohttpSession()
# bot = Bot(
#     token=TELEGRAM_BOT_TOKEN,
#     session=session,
#     default=DefaultBotProperties(parse_mode=ParseMode.HTML)
# )
# dp = Dispatcher()
# print("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# async def set_bot_commands(bot: Bot):
#     commands = [
#         BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
#         BotCommand(command="help", description="–ü–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞"),
#         BotCommand(command="question", description="–î–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
#         # –î–æ–±–∞–≤—å —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å
#         # BotCommand(command="question", description="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
#     ]
#     await bot.set_my_commands(commands)
# # üìå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ


# # üéô –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏


# # üìù –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (GPT-4)
# # async def correct_text(text):
# #     try:
# #         response = client.chat.completions.create(
# #             model="gpt-4",
# #             messages=[
# #                 {"role": "system", "content": "You are an English teacher correcting grammar."},
# #                 {"role": "user", "content": text}
# #             ]
# #         )
# #         return response.choices[0].message.content
# #     except Exception as e:
# #         print(f"‚ùå –û—à–∏–±–∫–∞ GPT-4: {e}")
# #         return text  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç


# # üîä –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å


# # ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @dp.message(F.voice)
# async def handle_voice(message: Message):
#     user_id = message.from_user.id

#     if user_id not in user_questions:
#         await message.answer("ü§ñ –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ—Å–∏ –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /question.")
#         return

#     question = user_questions[user_id]  # –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
#     try:
#         print("üì• –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
#         await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
#         file_info = await bot.get_file(message.voice.file_id)
#         file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
#         async with aiohttp.ClientSession() as session:
#             async with session.get(file_url) as resp:
#                 with open("voice.ogg", "wb") as f:
#                     f.write(await resp.read())
#         await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ")
#         print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ")

#         # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
#         wav_file = await convert_ogg_to_wav("voice.ogg")
#         if not wav_file:
#             await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
#             return
#         await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WAV")
#         # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
#         transcribed_text = await transcribe_audio(wav_file)

#         print(f"üìú User: {transcribed_text}")
#         await message.answer(f"üìú User: {transcribed_text}")
#         response = await evaluate_answer(question, transcribed_text)
#         print(f"üìú Teacher: {response}")
#         await message.answer(f"üìú Teacher: {response}")
#         # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
#         # corrected_text = await correct_text(transcribed_text)
#         # print(f"‚úÖ Corrected: {corrected_text}")

#         # speech = await text_for_speech(transcribed_text)
#         # print(f"üîä Speech: {speech}")
#         # # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
#         # speech_file = await text_to_speech(speech)
#         # if not speech_file:
#         #     await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏.")
#         #     return

#         # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å
#         # await message.answer_voice(FSInputFile(speech_file))

#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# @dp.message(Command("start"))
# async def handle_start(message: Message):
#     await message.answer(
#         "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ üéß\n"
#         "–Ø –æ—Ç–≤–µ—á–∞—é –≥–æ–ª–æ—Å–æ–º, –∑–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã –∏ —Å—Ç–∞—Ä–∞—é—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —É—á–∏—Ç–µ–ª—å! üßë‚Äçüè´"
#     )


# @dp.message(Command("question"))
# async def send_question(message: Message):
#     user_id = message.from_user.id
#     question = await generate_question()
#     user_questions[user_id] = question  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å

#     await message.answer(f"‚ùì –í–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ–±—è:\n{question}\n\nüí¨ –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!")

# # ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @dp.message(F.text)
# async def handle_text(message: Message):
#     try:
#         print(f"üìú User: {message.text}")
#         #corrected_text = await correct_text(message.text)
#         #await message.answer(f"‚úÖ Corrected:\n{corrected_text}")

#         speech = await text_for_speech(message.text)

#         speech_file = await text_to_speech(speech)
#         if not speech_file:
#             await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏.")
#             return

#         await message.answer_voice(FSInputFile(speech_file))

#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
