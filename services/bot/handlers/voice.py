from aiogram import Router, F
from aiogram.types import Message
from bot.services.question_manager import get_user_question
from bot.audio.convert import convert_ogg_to_wav
from bot.whisper.transcribe import transcribe_audio
from bot.gpt.gpt_service import evaluate_answer

import aiohttp
from bot.config import TELEGRAM_BOT_TOKEN

router = Router()

@router.message(F.voice)
async def handle_voice(message: Message):
    user_id = message.from_user.id
    question = get_user_question(user_id)
    if not question:
        await message.answer("ü§ñ –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ—Å–∏ –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /question.")
        return

    try:
        print("üì• –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
        await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        file_info = await message.bot.get_file(message.voice.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                with open("voice.ogg", "wb") as f:
                    f.write(await resp.read())
        await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ")
        print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        wav_file = await convert_ogg_to_wav("voice.ogg")
        if not wav_file:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
            return
        await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WAV")
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        transcribed_text = await transcribe_audio(wav_file)

        print(f"üìú User: {transcribed_text}")
        await message.answer(f"üìú User: {transcribed_text}")
        response = await evaluate_answer(question, transcribed_text)
        print(f"üìú Teacher: {response}")
        await message.answer(f"üìú Teacher: {response}")
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
        # corrected_text = await correct_text(transcribed_text)
        # print(f"‚úÖ Corrected: {corrected_text}")

        # speech = await text_for_speech(transcribed_text)
        # print(f"üîä Speech: {speech}")
        # # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
        # speech_file = await text_to_speech(speech)
        # if not speech_file:
        #     await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏.")
        #     return

        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å
        # await message.answer_voice(FSInputFile(speech_file))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
