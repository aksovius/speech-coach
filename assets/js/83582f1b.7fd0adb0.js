"use strict";(self.webpackChunkspeech_coach_docs=self.webpackChunkspeech_coach_docs||[]).push([[4574],{5400:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"architecture/architecture-choices","title":"Architecture Design","description":"This page provides a behind-the-scenes look at the technical decisions made while building Speech Coach \u2014 what technologies were chosen and why.","source":"@site/docs/architecture/architecture.md","sourceDirName":"architecture","slug":"/architecture/","permalink":"/docs/architecture/","draft":false,"unlisted":false,"editUrl":"https://github.com/aksovius/speech-coach/tree/main/docs-site/docs/architecture/architecture.md","tags":[],"version":"current","frontMatter":{"id":"architecture-choices","title":"Architecture Design","sidebar_label":"Architecture Design"},"sidebar":"docsSidebar","previous":{"title":"Architecture","permalink":"/docs/category/architecture"},"next":{"title":"Challenges","permalink":"/docs/architecture/challenges"}}');var r=i(4848),n=i(8453);const a={id:"architecture-choices",title:"Architecture Design",sidebar_label:"Architecture Design"},c="\ud83e\udde0 Architecture Design Choices",o={},h=[{value:"\ud83d\udca1 Why FastAPI + Redis Stream + Worker?",id:"-why-fastapi--redis-stream--worker",level:2},{value:"\ud83d\udd01 Why Separate FastAPI and Worker?",id:"-why-separate-fastapi-and-worker",level:2},{value:"\ud83d\udce4 Why Redis Streams Instead of Kafka?",id:"-why-redis-streams-instead-of-kafka",level:2},{value:"\ud83d\udce6 Why MinIO for Audio?",id:"-why-minio-for-audio",level:2},{value:"\ud83d\udcca Why Bytewax for Analytics?",id:"-why-bytewax-for-analytics",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"-architecture-design-choices",children:"\ud83e\udde0 Architecture Design Choices"})}),"\n",(0,r.jsxs)(s.p,{children:["This page provides a behind-the-scenes look at the technical decisions made while building ",(0,r.jsx)(s.strong,{children:"Speech Coach"})," \u2014 what technologies were chosen and why."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-why-fastapi--redis-stream--worker",children:"\ud83d\udca1 Why FastAPI + Redis Stream + Worker?"}),"\n",(0,r.jsxs)(s.p,{children:["I previously worked with Celery, but found it ",(0,r.jsx)(s.strong,{children:"heavy and configuration-intensive"})," for lean prototypes. Instead, I chose ",(0,r.jsx)(s.strong,{children:"FastStream"})," with ",(0,r.jsx)(s.strong,{children:"Redis Streams"}),", which felt like a better fit for a lightweight, real-time system."]}),"\n",(0,r.jsxs)(s.p,{children:["Redis Streams preserve message history (unlike pub/sub), similar to Kafka, but with far lower overhead \u2014 perfect for ",(0,r.jsx)(s.strong,{children:"business-layer logic"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["I considered using Redpanda for business messaging too, but decided to ",(0,r.jsx)(s.strong,{children:"separate responsibilities"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Redis Streams"})," handle core task distribution"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Redpanda"})," handles analytics pipelines"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Redis will also be used for caching \u2014 for instance, mapping ",(0,r.jsx)(s.code,{children:"telegram_id \u2192 user_id"}),", so all internal logic uses a unified user ID. This abstraction allows me to ",(0,r.jsx)(s.strong,{children:"swap Telegram with WhatsApp, Discord, etc."})," in the future."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-why-separate-fastapi-and-worker",children:"\ud83d\udd01 Why Separate FastAPI and Worker?"}),"\n",(0,r.jsx)(s.p,{children:"The architecture is split for performance and scalability:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FastAPI"}),' handles routing and distributes tasks \u2014 think of it as the "message switchboard"']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Workers"})," process audio and generate feedback"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This keeps the API responsive and allows independent scaling of workers \u2014 even on separate machines. It also reduces coupling and simplifies deployment."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-why-redis-streams-instead-of-kafka",children:"\ud83d\udce4 Why Redis Streams Instead of Kafka?"}),"\n",(0,r.jsxs)(s.p,{children:["Kafka is powerful, but ",(0,r.jsx)(s.strong,{children:"overkill for this project"}),". Redpanda is a great Kafka alternative \u2014 faster, simpler, C++-based \u2014 but even that felt too much for core messaging."]}),"\n",(0,r.jsxs)(s.p,{children:["Redis is already in the stack for caching and its Streams API is a ",(0,r.jsx)(s.strong,{children:"natural fit"})," for low-latency queuing."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-why-minio-for-audio",children:"\ud83d\udce6 Why MinIO for Audio?"}),"\n",(0,r.jsxs)(s.p,{children:["MinIO is a self-hosted, S3-compatible solution \u2014 ",(0,r.jsx)(s.strong,{children:"fast, cheap, local"}),". It avoids Internet upload delays during audio ingestion, and files can be ",(0,r.jsx)(s.strong,{children:"replicated to S3"})," later as a cold backup."]}),"\n",(0,r.jsx)(s.p,{children:"This hybrid gives both performance and portability \u2014 with full control."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-why-bytewax-for-analytics",children:"\ud83d\udcca Why Bytewax for Analytics?"}),"\n",(0,r.jsx)(s.p,{children:"Bytewax was chosen for two reasons:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["It's built in ",(0,r.jsx)(s.strong,{children:"Python"}),", just like the rest of the backend"]}),"\n",(0,r.jsx)(s.li,{children:"Analysts can prototype in notebooks, then deploy to production with minimal changes"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Other options (like Flink) required Scala/Java and didn't justify the complexity for a Python-native stack."})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>c});var t=i(6540);const r={},n=t.createContext(r);function a(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);