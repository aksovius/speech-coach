digraph G {
    // Graph styling
    rankdir=TB;
    ranksep=0.8;
    nodesep=0.8;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial", margin="0.2,0.1"];
    edge [fontname="Arial", fontsize=10];

    // Define subgraphs/clusters
    subgraph cluster_user {
        label="User Interaction";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        user [label="User", shape=circle, fillcolor=white];
        telegram [label="Telegram\nBot", fillcolor="#0088cc", fontcolor=white];
    }

    subgraph cluster_frontend {
        label="Frontend Layer";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        nginx [label="NGINX", fillcolor="#009639", fontcolor=white];
    }

    subgraph cluster_application {
        label="Application Layer";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        fastapi [label="FastAPI\nWebhook Handler", fillcolor="#009688", fontcolor=white];
        fastapi_cluster [label="FastAPI Cluster\n(Future)", fillcolor="#009688", fontcolor=white, style="rounded,filled,dashed"];
        redis_state [label="Redis\nShared State", fillcolor="#dc382d", fontcolor=white, shape=cylinder];
        redis [label="Redis\nStreams", fillcolor="#dc382d", fontcolor=white, shape=cylinder];
    }

    subgraph cluster_workers {
        label="Processing Layer";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        worker [label="Audio Worker\n(FastStream)", fillcolor="#4b8bbe", fontcolor=white];
        worker_cluster [label="Worker Cluster\n(Future)", fillcolor="#4b8bbe", fontcolor=white, style="rounded,filled,dashed"];
        openai [label="OpenAI API\n(Whisper + GPT-4)", fillcolor="#74aa9c", fontcolor=white];
        openai_worker [label="OpenAI Worker\n(Future)", fillcolor="#74aa9c", fontcolor=white, style="rounded,filled,dashed"];
    }

    subgraph cluster_storage {
        label="Storage Layer";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        postgres [label="PostgreSQL", fillcolor="#336791", fontcolor=white, shape=cylinder];
        patroni [label="Patroni Cluster\n(Future)", fillcolor="#336791", fontcolor=white, shape=cylinder, style="rounded,filled,dashed"];
        minio [label="MinIO\n(Audio Files)", fillcolor="#c72c48", fontcolor=white, shape=cylinder];
    }

    subgraph cluster_analytics {
        label="Analytics Layer";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        debezium [label="Debezium\n(CDC)", fillcolor="#3a0439", fontcolor=white];
        redpanda [label="Redpanda\n(Kafka API)", fillcolor="#ff5722", fontcolor=white, shape=cylinder];
        bytewax [label="Bytewax\nStream Processing", fillcolor="#ffca28", fontcolor=black];
        clickhouse [label="ClickHouse\n(Future)", fillcolor="#ffcc01", fontcolor=black, shape=cylinder, style="rounded,filled,dashed"];
    }

    subgraph cluster_monitoring {
        label="Monitoring Layer (Future)";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        prometheus [label="Prometheus", fillcolor="#e6522c", fontcolor=white, style="rounded,filled,dashed"];
        loki [label="Loki", fillcolor="#5c4ee5", fontcolor=white, style="rounded,filled,dashed"];
    }

    subgraph cluster_presentation {
        label="Presentation Layer (Future)";
        style=filled;
        color=lightgrey;
        fontname="Arial Bold";

        nextapp [label="Next/Nest App\n(Future)", fillcolor="#0070f3", fontcolor=white, style="rounded,filled,dashed"];
        grafana [label="Grafana", fillcolor="#f46800", fontcolor=white, style="rounded,filled,dashed"];
    }

    // Infrastructure components
    haproxy_app [label="HAProxy\n(Future)", fillcolor="#e5e5e5", style="rounded,filled,dashed"];
    haproxy_db [label="HAProxy\n(Future)", fillcolor="#e5e5e5", style="rounded,filled,dashed"];

    // Define edges/relationships - Current
    user -> telegram [label="Voice Messages"];
    telegram -> nginx [color="darkgreen", penwidth=2.0];
    nginx -> fastapi [label="Webhook", color="darkgreen", penwidth=2.0];
    fastapi -> redis [label="Publish Tasks", color="darkgreen", penwidth=2.0];
    fastapi -> redis_state [label="Session/Cache", color="darkgreen", penwidth=2.0];
    redis -> worker [label="Consume Tasks", color="darkgreen", penwidth=2.0];
    worker -> openai [label="Audio Processing", color="darkgreen", penwidth=2.0];
    worker -> minio [label="Store Audio", color="darkgreen", penwidth=2.0];
    fastapi -> postgres [label="Store Data", color="darkgreen", penwidth=2.0];
    postgres -> debezium [label="CDC", color="darkgreen", penwidth=2.0];
    debezium -> redpanda [label="Data Events", color="darkgreen", penwidth=2.0];
    redpanda -> bytewax [label="Stream", color="darkgreen", penwidth=2.0];

    // Define edges/relationships - Future
    telegram -> nginx [style=dashed];
    nginx -> haproxy_app [style=dashed];
    haproxy_app -> fastapi_cluster [style=dashed];
    fastapi_cluster -> redis_state [label="Shared State", style=dashed];
    fastapi_cluster -> redis [label="Tasks", style=dashed];
    fastapi -> haproxy_db [style=dashed];
    haproxy_db -> patroni [style=dashed];
    redis -> worker_cluster [label="Scale Out", style=dashed];
    redis -> openai_worker [label="Dedicated GPT", style=dashed];
    patroni -> debezium [style=dashed];
    bytewax -> clickhouse [label="Store Metrics", style=dashed];
    clickhouse -> grafana [label="Visualize", style=dashed];
    clickhouse -> nextapp [style=dashed];
    prometheus -> grafana [style=dashed];
    loki -> grafana [style=dashed];
    nginx -> nextapp [style=dashed];

    // Monitoring connections
    prometheus -> nginx [style=dashed];
    prometheus -> fastapi_cluster [style=dashed];
    prometheus -> worker_cluster [style=dashed];
    prometheus -> openai_worker [style=dashed];
    prometheus -> patroni [style=dashed];
    prometheus -> redpanda [style=dashed];
    prometheus -> bytewax [style=dashed];
    loki -> nginx [style=dashed];
    loki -> fastapi_cluster [style=dashed];
    loki -> worker_cluster [style=dashed];

    // Legend
    subgraph cluster_legend {
        label = "Legend";
        fontname="Arial Bold";
        fontsize=12;
        style=filled;
        color=lightgrey;

        current_node [label="Current Component", style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
        future_node [label="Future Component", style="rounded,filled,dashed", fillcolor=lightblue, fontname="Arial"];
        current_flow [label="Current Flow", shape=plaintext];
        future_flow [label="Future Flow", shape=plaintext];

        // Edges for legend
        edge1 [label="", shape=plaintext, width=0.5];
        edge2 [label="", shape=plaintext, width=0.5];

        current_node -> edge1 [color="darkgreen", penwidth=2.0];
        future_node -> edge2 [style=dashed];
        edge1 -> current_flow [style=invis];
        edge2 -> future_flow [style=invis];
    }
}
