services:
  server:
    build:
      context: .
      dockerfile: src/server/Dockerfile
    container_name: speech-server
    volumes:
      - ./src/server:/src/server
      - ./src/shared:/src/shared
    working_dir: /src
    ports:
      - "${API_PORT}:8000"
    env_file:
      - ../secrets/speech.env
    networks:
      - app-network
      - monitoring-network
    tty: true
    stdin_open: true
    command: uvicorn server.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  worker:
    build:
      context: .
      dockerfile: src/worker/Dockerfile
    container_name: speech-worker
    volumes:
      - ./src/worker:/src/worker
      - ./src/shared:/src/shared
    working_dir: /src
    env_file:
      - ../secrets/speech.env
    networks:
      - app-network
      - monitoring-network
    command: python -m worker.main

  # db:
  #   image: postgres:latest
  #   container_name: speech-db
  #   environment:
  #     POSTGRES_PASSWORD: ${DB_PASS}
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_DB: ${DB_NAME}
  #   volumes:
  #     - db_data:/var/lib/postgresql/data
  #     - ./config/postgresql/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
  #     - ./config/postgresql/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
  #   ports:
  #     - "${DB_PORT}:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  # redis:
  #   image: redis:latest
  #   container_name: speech-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
  # minio:
  #   restart: always
  #   image: quay.io/minio/minio
  #   container_name: speech-minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   environment:
  #     - MINIO_ROOT_USER=${MINIO_ROOT_USER}
  #     - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  #   volumes:
  #     - minio_data:/data
  #   command: server /data --console-address ":9001"
  # redpanda:
  #   command:
  #     - redpanda start
  #     - --kafka-addr internal://0.0.0.0:9092
  #     - --advertise-kafka-addr internal://redpanda:9092
  #     - --pandaproxy-addr internal://0.0.0.0:8082
  #     - --advertise-pandaproxy-addr internal://redpanda:8082
  #     - --schema-registry-addr internal://0.0.0.0:8081
  #     - --rpc-addr redpanda:33145
  #     - --advertise-rpc-addr redpanda:33145
  #     - --smp 1
  #     - --memory 1G
  #     - --mode dev-container
  #     - --default-log-level=warn
  #   image: docker.redpanda.com/redpandadata/redpanda:v23.2.19
  #   container_name: speech-redpanda
  #   volumes:
  #     - redpanda:/var/lib/redpanda/data
  #   ports:
  #     - "9092:9092"
  #   healthcheck:
  #     test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
  #     interval: 15s
  #     timeout: 3s
  #     retries: 5
  #     start_period: 5s

  # debezium:
  #   image: debezium/connect:3.0.0.Final
  #   container_name: speech-debezium
  #   depends_on:
  #     - redpanda
  #   environment:
  #     BOOTSTRAP_SERVERS: redpanda:9092
  #     GROUP_ID: 1
  #     CONFIG_STORAGE_TOPIC: debezium_config
  #     OFFSET_STORAGE_TOPIC: debezium_offsets
  #     STATUS_STORAGE_TOPIC: debezium_status
  #   ports:
  #     - "8083:8083"
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   depends_on:
  #     - redpanda
  #     - debezium
  #   ports:
  #     - "8089:8080"
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: redpanda:9092
  #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium
  #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium:8083
  # clickhouse:
  #   image: clickhouse/clickhouse-server:23.12
  #   ports:
  #     - "8123:8123"
  #     - "9005:9000"
  #   volumes:
  #     - clickhouse_data:/var/lib/clickhouse
  bytewax:
    build:
      context: ./src/bytewax
      dockerfile: Dockerfile
    container_name: speech-bytewax
    volumes:
      - ./src/bytewax:/bytewax
    command: /bytewax/start.sh
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
    tty: true

    # depends_on:
    #   redpanda:
    #     condition: service_healthy
  prometheus:
    image: prom/prometheus:latest
    container_name: speech-prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: speech-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki:/etc/loki
      - loki_data:/loki
    networks:
      - monitoring-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: speech-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-clickhouse-datasource
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge
volumes:
  db_data:
  # minio_data:
  # clickhouse_data:
  # redpanda:
  # redis_data:
  prometheus_data:
  loki_data:
  grafana_data:
